<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <ScriptExe Condition="'$(OS)' == 'Windows_NT'" >@"%SystemRoot%\System32\WindowsPowerShell\v1.0\powershell.exe" -NoProfile -InputFormat None -ExecutionPolicy Bypass</ScriptExe>
        <ScriptExe Condition="'$(OS)' != 'Windows_NT'" >bash</ScriptExe>
        <ScriptPrefix Condition="'$(OS)' == 'Windows_NT'" >&quot;&amp;</ScriptPrefix>
        <ScriptPostfix  Condition="'$(OS)' == 'Windows_NT'" >&quot;</ScriptPostfix>

        <ScriptFileEnding Condition="'$(OS)' == 'Windows_NT'" >.ps1</ScriptFileEnding>
        <ScriptFileEnding Condition="'$(OS)' != 'Windows_NT'" >.sh</ScriptFileEnding>

        <LocalPackageResolver>$(ScriptExe) $(ScriptPrefix) '$(MSBuildThisFileDirectory)../tools/InstallPackage$(ScriptFileEnding)'</LocalPackageResolver>
        <RestoreSources>$([System.IO.Path]::GetTempPath())/LocalPackageReferences;$(RestoreSources)</RestoreSources>
        
        
    </PropertyGroup>
    <Target Name="ResolveLocalPackages" BeforeTargets="_GenerateRestoreGraphProjectEntry" Condition="'@(ProjectAsPackageReference)'!='' AND '@(ResolvedProjectAsPackageReference)' != '@(ProjectAsPackageReference)'" Inputs="@(ProjectAsPackageReference)" Outputs="__%(Identity).__DUMMY__">
        <PropertyGroup>
            <OutputOfExec></OutputOfExec>
        </PropertyGroup>
        <Exec Command="$(LocalPackageResolver) %(ProjectAsPackageReference.Identity)" ConsoleToMSBuild="true">
            <Output TaskParameter="ConsoleOutput" PropertyName="OutputOfExec" />
        </Exec>
        <Error Text="Failed to include %(ProjectAsPackageReference.Identity) project as a PackageReference." Condition="'$(OutputOfExec)'==''" />
        
        <PropertyGroup>
            <LocalNugetPackage>$([System.String]::new('$(OutputOfExec)').Split(';', 2)[0].Trim())</LocalNugetPackage>
            <LocalNugetVersion>$([System.String]::new('$(OutputOfExec)').Split(';', 2)[1].Trim())</LocalNugetVersion>
            <LocalNugetFile>$([System.IO.Path]::GetFileName($(LocalNugetPackage)))</LocalNugetFile>
            <LocalNugetDirectory>$([System.IO.Path]::GetDirectoryName($(LocalNugetPackage)))</LocalNugetDirectory>
        </PropertyGroup>
        
        <PropertyGroup>
            <LocalNugetName>$(LocalNugetFile.Substring(0, $([MSBuild]::Subtract($([MSBuild]::Subtract($(LocalNugetFile.Length), 7)),$(LocalNugetVersion.Length)))))</LocalNugetName>
        </PropertyGroup>
        
<Warning Text="Trying to install nuget package '$(LocalNugetName)' version '$(LocalNugetVersion)' at location '$(LocalNugetDirectory)'" />
        <!--<Warning Text="Trying to install nuget package '$(LocalNugetName)' version '$(LocalNugetVersion)' at location '$(LocalNugetDirectory)'" />-->
        <ItemGroup>
            <PackageReference Include="$(LocalNugetName)" Version="$(LocalNugetVersion)"/>
            <ResolvedProjectAsPackageReference Include="%(ProjectAsPackageReference.Identity)" />
        </ItemGroup>
    </Target>
    <Target Name="CheckResolved" BeforeTargets="CoreCompile" DependsOnTargets="ResolveLocalPackages" Condition="'@(ResolvedProjectAsPackageReference)' != '@(ProjectAsPackageReference)'">
        
        <PropertyGroup>
            <_LocalNugetPackageResolved Condition="'@(ResolvedProjectAsPackageReference)' == '@(ProjectAsPackageReference)'">true</_LocalNugetPackageResolved>
            <_LocalNugetPackageResolved Condition="'@(ResolvedProjectAsPackageReference)' != '@(ProjectAsPackageReference)'" >false</_LocalNugetPackageResolved>
        </PropertyGroup>
        
        <CallTarget Targets="Restore"  />
        
        <Warning Text="Where packages resolved? $(_LocalNugetPackageResolved). Because '@(ResolvedProjectAsPackageReference)' vs '@(ProjectAsPackageReference)'"  Condition="'$(_LocalNugetPackageResolved)'!='true'"/>

    </Target>
</Project>
